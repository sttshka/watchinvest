import { defineI18nMiddleware } from "@intlify/h3";
import { deepCopy } from "@intlify/shared";
import { nuxtI18nOptions, localeCodes, vueI18nConfigs, localeMessages } from "#internal/i18n/options.mjs";
import { localeDetector as _localeDetector } from "#internal/i18n/locale.detector.mjs";
import { loadVueI18nOptions, loadInitialMessages, makeFallbackLocaleCodes, loadLocale } from "../messages.mjs";
const nuxtMock = { runWithContext: async (fn) => await fn() };
export const nitroPlugin = async (nitro) => {
  const cacheMessages = /* @__PURE__ */ new Map();
  const options = await loadVueI18nOptions(vueI18nConfigs, nuxtMock);
  options.messages = options.messages || {};
  const fallbackLocale = options.fallbackLocale = options.fallbackLocale ?? false;
  const { defaultLocale, lazy } = nuxtI18nOptions;
  const initialLocale = defaultLocale || options.locale || "en-US";
  options.messages = await loadInitialMessages(options.messages, localeMessages, {
    ...nuxtI18nOptions,
    initialLocale,
    fallbackLocale: options.fallbackLocale,
    localeCodes,
    cacheMessages
  });
  const localeDetector = async (event, i18nContext) => {
    const locale = _localeDetector(event, { defaultLocale: initialLocale, fallbackLocale: options.fallbackLocale });
    if (lazy) {
      const setter = (locale2, message) => {
        i18nContext.messages[locale2] = i18nContext.messages[locale2] || {};
        deepCopy(message, i18nContext.messages[locale2]);
      };
      if (fallbackLocale) {
        const fallbackLocales = makeFallbackLocaleCodes(fallbackLocale, [locale]);
        await Promise.all(fallbackLocales.map((locale2) => loadLocale({ locale: locale2, setter, localeMessages }, cacheMessages)));
      }
      await loadLocale({ locale, setter, localeMessages }, cacheMessages);
    }
    return locale;
  };
  const { onRequest, onAfterResponse } = defineI18nMiddleware({
    ...options,
    locale: localeDetector
  });
  nitro.hooks.hook("request", onRequest);
  nitro.hooks.hook("afterResponse", onAfterResponse);
};
export default nitroPlugin;
