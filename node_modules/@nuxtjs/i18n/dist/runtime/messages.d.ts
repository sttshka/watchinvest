import type { I18nOptions, Locale, FallbackLocale, LocaleMessages, DefineLocaleMessage } from 'vue-i18n';
import type { NuxtApp } from 'nuxt/dist/app';
import type { DeepRequired } from 'ts-essentials';
import type { VueI18nConfig, NuxtI18nOptions } from '../types';
export type LocaleLoader = {
    key: string;
    load: () => Promise<any>;
    cache: boolean;
};
export declare function loadVueI18nOptions(vueI18nConfigs: VueI18nConfig[], nuxt: Pick<NuxtApp, 'runWithContext'>): Promise<I18nOptions>;
export declare function makeFallbackLocaleCodes(fallback: FallbackLocale, locales: Locale[]): Locale[];
export declare function loadInitialMessages<Context extends NuxtApp = NuxtApp>(messages: LocaleMessages<DefineLocaleMessage>, localeLoaderMessages: Record<Locale, LocaleLoader[]>, options: DeepRequired<NuxtI18nOptions<Context>> & {
    initialLocale: Locale;
    fallbackLocale: FallbackLocale;
    localeCodes: string[];
    cacheMessages?: Map<string, LocaleMessages<DefineLocaleMessage>>;
}): Promise<Record<string, any>>;
export declare function loadLocale({ locale, localeMessages, setter }: {
    locale: Locale;
    localeMessages: Record<Locale, LocaleLoader[]>;
    setter: (locale: Locale, message: LocaleMessages<DefineLocaleMessage>) => void;
}, cacheMessages?: Map<string, LocaleMessages<DefineLocaleMessage>>): Promise<void>;
