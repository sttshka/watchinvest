import * as _nuxt_schema from '@nuxt/schema';
import { HookResult } from '@nuxt/schema';
import { LocaleObject, Strategies, I18nRoutingOptions } from 'vue-i18n-routing';
import { Locale, I18nOptions } from 'vue-i18n';
import { PluginOptions } from '@intlify/unplugin-vue-i18n';
import { ParsedPath } from 'path';

type RedirectOnOptions = 'all' | 'root' | 'no prefix';
interface DetectBrowserLanguageOptions {
    alwaysRedirect?: boolean;
    cookieCrossOrigin?: boolean;
    cookieDomain?: string | null;
    cookieKey?: string;
    cookieSecure?: boolean;
    fallbackLocale?: Locale | null;
    redirectOn?: RedirectOnOptions;
    useCookie?: boolean;
}
type LocaleType = 'static' | 'dynamic' | 'unknown';
type LocaleFile = {
    path: string;
    cache?: boolean;
};
type LocaleInfo = {
    /**
     * NOTE:
     *  The following fields are for `file` in the nuxt i18n module `locales` option
     */
    path?: string;
    hash?: string;
    type?: LocaleType;
    /**
     * NOTE:
     *  The following fields are for `files` (excludes nuxt layers) in the nuxt i18n module `locales` option.
     */
    paths?: string[];
    hashes?: string[];
    types?: LocaleType[];
} & Omit<LocaleObject, 'file' | 'files'> & {
    files: LocaleFile[];
    meta?: (FileMeta & {
        file: LocaleFile;
    })[];
};
type FileMeta = {
    path: string;
    loadPath: string;
    hash: string;
    type: LocaleType;
    parsed: ParsedPath;
    key: string;
};
type VueI18nConfigPathInfo = {
    relative?: string;
    absolute?: string;
    hash?: string;
    type?: LocaleType;
    rootDir: string;
    relativeBase: string;
    meta: FileMeta;
};
interface RootRedirectOptions {
    path: string;
    statusCode: number;
}
type CustomRoutePages = {
    [key: string]: false | {
        [key: string]: false | string;
    };
};
interface ExperimentalFeatures {
    localeDetector?: string;
}
interface BundleOptions extends Pick<PluginOptions, 'compositionOnly' | 'runtimeOnly' | 'fullInstall' | 'dropMessageCompiler' | 'onlyLocales'> {
}
interface CustomBlocksOptions extends Pick<PluginOptions, 'defaultSFCLang' | 'globalSFCScope'> {
}
interface LocaleMessageCompilationOptions {
    jit?: boolean;
    strictMessage?: boolean;
    escapeHtml?: boolean;
}
type NuxtI18nOptions<Context = unknown> = {
    vueI18n?: string;
    experimental?: ExperimentalFeatures;
    bundle?: BundleOptions;
    compilation?: LocaleMessageCompilationOptions;
    customBlocks?: CustomBlocksOptions;
    differentDomains?: boolean;
    detectBrowserLanguage?: DetectBrowserLanguageOptions | false;
    langDir?: string | null;
    lazy?: boolean;
    pages?: CustomRoutePages;
    customRoutes?: 'page' | 'config';
    /**
     * @internal
     */
    overrides?: Omit<NuxtI18nOptions<Context>, 'overrides'>;
    i18nModules?: {
        langDir?: string | null;
        locales?: NuxtI18nOptions<Context>['locales'];
    }[];
    rootRedirect?: string | null | RootRedirectOptions;
    routesNameSeparator?: string;
    skipSettingLocaleOnNavigate?: boolean;
    strategy?: Strategies;
    types?: 'composition' | 'legacy';
    debug?: boolean;
    dynamicRouteParams?: boolean;
    parallelPlugin?: boolean;
} & Pick<I18nRoutingOptions<Context>, 'baseUrl' | 'strategy' | 'defaultDirection' | 'defaultLocale' | 'locales' | 'defaultLocaleRouteNameSuffix' | 'routesNameSeparator' | 'trailingSlash'>;
type NuxtI18nInternalOptions = {
    __normalizedLocales?: LocaleObject[];
};
type VueI18nConfig = () => Promise<{
    default: I18nOptions | (() => I18nOptions | Promise<I18nOptions>);
}>;

declare const _default: _nuxt_schema.NuxtModule<NuxtI18nOptions>;

interface ModuleOptions extends NuxtI18nOptions {
}
interface ModulePublicRuntimeConfig {
    i18n?: Pick<NuxtI18nOptions<unknown>, 'baseUrl'>;
}
interface ModuleHooks {
    'i18n:registerModule': (registerModule: (config: Pick<NuxtI18nOptions<unknown>, 'langDir' | 'locales'>) => void) => HookResult;
}
interface RuntimeModuleHooks {
    'i18n:beforeLocaleSwitch': <Context = unknown>(params: {
        oldLocale: string;
        newLocale: string;
        initialSetup: boolean;
        context: Context;
    }) => HookResult;
    'i18n:localeSwitched': (params: {
        oldLocale: string;
        newLocale: string;
    }) => HookResult;
}
declare module '#app' {
    interface RuntimeNuxtHooks extends RuntimeModuleHooks {
    }
}
declare module '@nuxt/schema' {
    interface NuxtConfig {
        ['i18n']?: Partial<ModuleOptions>;
    }
    interface NuxtOptions {
        ['i18n']?: ModuleOptions;
    }
    interface NuxtHooks extends ModuleHooks {
    }
    interface PublicRuntimeConfig extends ModulePublicRuntimeConfig {
    }
}

export { type BundleOptions, type CustomBlocksOptions, type CustomRoutePages, type DetectBrowserLanguageOptions, type ExperimentalFeatures, type FileMeta, type LocaleFile, type LocaleInfo, type LocaleMessageCompilationOptions, type LocaleType, type ModuleHooks, type ModuleOptions, type ModulePublicRuntimeConfig, type NuxtI18nInternalOptions, type NuxtI18nOptions, type RedirectOnOptions, type RootRedirectOptions, type RuntimeModuleHooks, type VueI18nConfig, type VueI18nConfigPathInfo, _default as default };
